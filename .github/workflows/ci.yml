name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allows manual trigger

permissions:
  contents: read    # Required for checkout
  checks: write     # Required for test reporters to create check runs
  actions: write    # Required for artifact uploads
  pull-requests: read # Required for PR context

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=true
  GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

jobs:
  # ✅ Code Quality & Security
  quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Shallow clones should be disabled for better analysis

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 📦 Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true

    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 🧹 Run Lint
      run: ./gradlew lintDebug

    - name: 📊 Upload Lint Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: |
          app/build/reports/lint-results-debug.html
          app/build/reports/lint-results-debug.xml

  # 🧪 Unit Tests
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 📦 Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 🧪 Run Unit Tests
      run: ./gradlew testDebugUnitTest --continue

    - name: 📊 Generate Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 📋 Unit Test Results
        path: '**/TEST-*.xml'
        reporter: java-junit
        fail-on-error: false
        fail-on-empty: false

    - name: 📤 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          app/build/reports/tests/
          app/build/test-results/

  # 🏗️ Build APKs
  build:
    name: 🏗️ Build APKs
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [quality, test]
    strategy:
      fail-fast: false
      matrix:
        build-type: [debug, release]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 📦 Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 🏗️ Build ${{ matrix.build-type }} APK
      run: ./gradlew assemble${{ matrix.build-type == 'debug' && 'Debug' || 'Release' }}

    - name: 📤 Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-${{ matrix.build-type }}
        path: app/build/outputs/apk/${{ matrix.build-type }}/*.apk

    - name: 📊 APK Info
      if: matrix.build-type == 'debug'
      run: |
        APK_PATH=$(find app/build/outputs/apk/debug -name "*.apk" | head -1)
        APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
        echo "📱 APK Size: $APK_SIZE"
        echo "📁 APK Path: $APK_PATH"

  # 📱 Instrumented Tests (Optional - commented out due to cost)
  # instrumented-test:
  #   name: 📱 Instrumented Tests
  #   runs-on: macos-latest
  #   needs: build
  #   
  #   steps:
  #   - name: 📥 Checkout Code
  #     uses: actions/checkout@v4
  #   
  #   - name: ☕ Set up JDK 17
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '17'
  #       distribution: 'temurin'
  #   
  #   - name: 📦 Setup Gradle
  #     uses: gradle/gradle-build-action@v2
  #   
  #   - name: 🤖 Run Instrumented Tests
  #     uses: reactivecircus/android-emulator-runner@v2
  #     with:
  #       api-level: 29
  #       target: default
  #       arch: x86_64
  #       profile: Nexus 6
  #       script: ./gradlew connectedAndroidTest

  # 📈 Code Coverage (Optional)
  coverage:
    name: 📈 Code Coverage
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 📦 Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    # Note: Add Jacoco plugin to build.gradle.kts for coverage
    - name: 📊 Generate Coverage Report
      run: |
        echo "📈 Coverage reporting would be here"
        echo "Add Jacoco plugin to build.gradle.kts to enable coverage"

  # 🚀 Deploy/Release (only on main branch)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📥 Download Debug APK
      uses: actions/download-artifact@v4
      with:
        name: app-debug
        path: artifacts/

    - name: 🏷️ Create Release Tag
      id: tag
      run: |
        # Extract version from build.gradle.kts with better error handling
        VERSION=$(grep -E 'versionName\s*=\s*"[^"]*"' app/build.gradle.kts | cut -d'"' -f2 | head -1)
        
        # Fallback if version extraction fails
        if [ -z "$VERSION" ] || [ "$VERSION" = "" ]; then
          echo "⚠️ Warning: Could not extract version from build.gradle.kts, using default"
          VERSION="0.0.0"
        fi
        
        # Remove any debug/release suffixes for tagging
        VERSION_CLEAN=$(echo "$VERSION" | sed 's/-debug$//' | sed 's/-release$//')
        
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        TAG="v${VERSION_CLEAN}-${TIMESTAMP}"
        
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "📦 Release Tag: ${TAG}"
        echo "📝 Original Version: ${VERSION}"
        echo "🧹 Clean Version: ${VERSION_CLEAN}"

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        body: |
          🚀 **Automated Release**
          
          📱 **APK Generated**: ${{ github.sha }}
          🏗️ **Build**: Debug
          📅 **Date**: ${{ github.event.head_commit.timestamp }}
          
          ### 📋 Changes
          ${{ github.event.head_commit.message }}
          
          ### 📊 Build Info
          - **Commit**: ${{ github.sha }}
          - **Author**: ${{ github.event.head_commit.author.name }}
          - **Workflow**: ${{ github.workflow }}
        files: |
          artifacts/*.apk
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ✅ Status Check
  status:
    name: ✅ Build Status
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: always()
    
    steps:
    - name: 📊 Build Summary
      run: |
        echo "## 📊 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.quality.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "🎉 **All checks passed!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some checks failed!**" >> $GITHUB_STEP_SUMMARY
        fi
